uniform vec4 AmbientColor;
uniform vec4 DiffuseColor;
uniform vec3 DiffuseDirection;

in vec3 psNormal;
in vec4 psColor;

out vec4 outColor;

uniform sampler2D ShadowMap;
in vec4 shadowPosition;

void main()
{

    float DiffuseIntensity = clamp(-DiffuseDirection.z * 0.6,0.0,1.0);
    float AmbientIntensity = 0.2f + clamp(-DiffuseDirection.z *0.5f,0.0,0.8);
    
    float lighted = 1.0f;
    float biasValue = 0.00002;
    float cosTheta = clamp(dot(psNormal,DiffuseDirection),0,1);
     
    float bias = biasValue*tan(acos(cosTheta));
    bias = clamp(bias, biasValue,biasValue*0.5f);
    
    if (shadowPosition.x >-1 && shadowPosition.x <1 &&  
       shadowPosition.y > -1 && shadowPosition.y <1 &&
       texture( ShadowMap,  shadowPosition.xy).z  <  (shadowPosition.z -bias)){
            lighted = 0.5f;
       }
	
	vec4 ambient = AmbientColor * AmbientIntensity;
	vec4 diffuse = lighted*clamp(dot(-DiffuseDirection,psNormal),0.0,1.0) * DiffuseColor * DiffuseIntensity;
	
	outColor = psColor* clamp(ambient + vec4(diffuse.rgb,1.0),0.0,1.0);
}